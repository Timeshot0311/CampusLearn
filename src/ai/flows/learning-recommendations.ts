// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that provides personalized learning path recommendations for students.
 *
 * - getLearningRecommendations - A function that generates personalized learning path suggestions.
 * - LearningRecommendationsInput - The input type for the getLearningRecommendations function.
 * - LearningRecommendationsOutput - The return type for the getLearningRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const LearningRecommendationsInputSchema = z.object({
  studentId: z.string().describe('The unique identifier of the student.'),
  courseId: z.string().describe('The unique identifier of the course.'),
  pastProgress: z
    .string()
    .describe(
      'A summary of the studentâ€™s past progress in the course, including completed modules and quiz scores.'
    ),
  courseObjectives: z
    .string()
    .describe('The learning objectives for the course.'),
  modules: z
    .string()
    .describe(
      'The modules available in the course, including topics covered in each module.'
    ),
});
export type LearningRecommendationsInput = z.infer<
  typeof LearningRecommendationsInputSchema
>;

const LearningRecommendationsOutputSchema = z.object({
  recommendedModules: z
    .array(z.string())
    .describe(
      'A list of module names recommended for the student, based on their past progress and course objectives.'
    ),
  reasoning: z
    .string()
    .describe(
      'Explanation of why the modules were recommended, referencing past progress and course objectives.'
    ),
});
export type LearningRecommendationsOutput = z.infer<
  typeof LearningRecommendationsOutputSchema
>;

export async function getLearningRecommendations(
  input: LearningRecommendationsInput
): Promise<LearningRecommendationsOutput> {
  return learningRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'learningRecommendationsPrompt',
  input: {schema: LearningRecommendationsInputSchema},
  output: {schema: LearningRecommendationsOutputSchema},
  prompt: `You are an AI learning path recommendation system. You are provided with:

- A student's past progress in a course:
{{pastProgress}}

- The learning objectives for the course:
{{courseObjectives}}

- The modules available in the course:
{{modules}}

Based on this information, recommend a list of modules for the student to focus on to improve their learning outcomes, and explain your reasoning for recommending them.

Make sure to respond using the JSON schema provided, including square brackets around recommendedModules.
`,
});

const learningRecommendationsFlow = ai.defineFlow(
  {
    name: 'learningRecommendationsFlow',
    inputSchema: LearningRecommendationsInputSchema,
    outputSchema: LearningRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
