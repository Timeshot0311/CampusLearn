rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    function isOwner(resourceId) {
      return request.auth.uid == resourceId;
    }

    // COURSES
    match /courses/{courseId} {
      allow read: if isAuth();
      allow create: if isOneOfRoles(['admin', 'lecturer']);
      allow update: if isOneOfRoles(['admin', 'lecturer']);
      allow delete: if isOneOfRoles(['admin', 'lecturer']);
    }

    // USERS
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update: if isAuth() && request.auth.uid == userId; // Users can only update their own profile
      allow delete: if isRole('admin');
    }

    // SUBMISSIONS
    match /submissions/{submissionId} {
      allow read: if isAuth();
      // Students can create, Tutors/Lecturers can update (grade)
      allow create: if isRole('student');
      allow update: if isOneOfRoles(['admin', 'tutor', 'lecturer']);
    }

    // GRADES
    match /grades/{gradeId} {
      allow read: if isAuth();
      // Tutors/Lecturers create grades
      allow create: if isOneOfRoles(['admin', 'tutor', 'lecturer']);
    }
    
    // TOPICS
    match /topics/{topicId} {
        allow read: if isAuth();
        allow create: if isAuth();
        allow update: if isAuth(); // Allow any auth'd user to update (e.g., add replies, subscribe)
        allow delete: if isOneOfRoles(['admin', 'lecturer', 'tutor']);
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read: if isAuth() && request.auth.uid == resource.data.userId;
        allow create: if isAuth();
        allow update: if isAuth() && request.auth.uid == resource.data.userId;
    }
  }
}