rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(resourceId) {
      return request.auth.uid == resourceId;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isStudent(userId) {
        return getUserRole(userId) == 'student';
    }

    function isTutorOrLecturer(userId) {
      let role = getUserRole(userId);
      return role == 'tutor' || role == 'lecturer';
    }

    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }

    // Collections
    match /users/{userId} {
      allow read: if isAuth();
      // Corrected Rule: Allow a user to create their own document.
      allow create: if isAuth() && request.auth.uid == userId;
      // Allow user/admin to update their own profile,
      // and allow any authenticated user to update ONLY the subscribers list.
      allow update: if isAuth() && (
        (isOwner(userId) || isAdmin(request.auth.uid)) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['subscribers']))
      );
      allow delete: if isAuth() && isAdmin(request.auth.uid);
    }

    match /courses/{courseId} {
      // Corrected Rule: Allow students to read courses they are enrolled in.
      allow read: if isAuth() && 
            (resource.data.published == true || 
            request.auth.uid in resource.data.enrolledStudents || 
            isTutorOrLecturer(request.auth.uid) || 
            isAdmin(request.auth.uid));
      allow create: if isAuth() && (isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
      allow update, delete: if isAuth() && (resource.data.ownerId == request.auth.uid || isAdmin(request.auth.uid));
    }

    match /topics/{topicId} {
      allow read, create: if isAuth();
      // Corrected Rule: Allow any authenticated user to update a topic to post replies.
      allow update: if isAuth();
      allow delete: if isAuth() && (isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /learningMaterials/{materialId} {
      allow read: if isAuth();
      allow create, update, delete: if isAuth() && (isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /assignments/{assignmentId} {
        allow read: if isAuth();
        allow create, update, delete: if isAuth() && (isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /submissions/{submissionId} {
      allow read: if isAuth() && (isOwner(resource.data.studentId) || isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
      allow create: if isAuth() && isStudent(request.auth.uid);
      allow update: if isAuth() && (isOwner(resource.data.studentId) || isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if isAuth() && isAdmin(request.auth.uid);
    }

    match /quizzes/{quizId} {
      allow read: if isAuth();
      allow create, update, delete: if isAuth() && (isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /attempts/{attemptId} {
       allow read: if isAuth() && (isOwner(resource.data.studentId) || isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
       allow create: if isAuth() && isStudent(request.auth.uid);
       allow update, delete: if false; // Attempts should be immutable
    }

    match /grades/{gradeId} {
      allow read: if isAuth(); // Students should be able to read their grades
      allow create, update: if isAuth() && (isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if isAuth() && isAdmin(request.auth.uid);
    }

    match /discussions/{discussionId} {
      allow read, write: if isAuth();
    }
    
    match /announcements/{announcementId} {
      allow read: if isAuth();
      allow create, update, delete: if isAuth() && (isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
    }
    
    match /notifications/{notifId} {
        allow read, update: if isAuth() && isOwner(resource.data.userId);
        allow create: if isAuth();
        allow delete: if isAuth() && (isTutorOrLecturer(request.auth.uid) || isAdmin(request.auth.uid));
    }

    match /auditLogs/{logId} {
      allow read: if isAuth() && isAdmin(request.auth.uid);
      allow create, update, delete: if false; // Logs should be immutable and created server-side
    }
  }
}
